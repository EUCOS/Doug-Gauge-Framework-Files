/*
 * This file is part of The Gauge Framework.
 *
 * The Gauge Framework is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * The Gauge Framework is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * The Gauge Framework. If not, see <http://www.gnu.org/licenses/>.
 */

/*!
 * @file BasisHandler.h
 * @author D. Moore <douglas_moore1@baylor.edu>
 * @date 04.03.2012
 *
 * @brief The Gauge::BasisHandler class is defined.
 */

#ifndef GAUGE_FRAMEWORK_BASISHANDLER_H
#define GAUGE_FRAMEWORK_BASISHANDLER_H

#include <Datatypes/Basis.h>
#include <Datatypes/Input.h>
#include <NVectorHandler.h>

namespace Gauge {
  /*!
   * The Gauge::BasisHandler class is charged with actually constructing Basis
   * sets from the Gauge::NVector solutions, or any other method that may be
   * added to this class in the future.
   */
  class BasisHandler {
    public:
      /*!
       * Our default constructor does exactly what a default constructor should
       * do, initalize everything to an clean state.
       */
      BasisHandler() {}
      /*!
       * Because we are not dynamically allocating any memory, our destructor is
       * trivial.
       */
      ~BasisHandler() {}
      /*!
       * Setup does all of the non-trivial initialization needed to get the
       * BasisHandler up and running.
       *
       * @param[in] input The Gauge::Input used to specify the type of basis
       * vector set to construct.
       */
      void Setup(const Gauge::Input &input);
      /*!
       * This method returns a pointer to the current basis.
       *
       * @return A constant reference to the internal basis state,
       * Gauge::BasisHandler::basis_.
       */
      const Basis &basis() const { return basis_; }
      /*!
       * This method constructs the next Gauge::Basis based on the
       * Gauge::NVectors generated by Gauge::NVectorHandler.
       *
       * @see Gauge::BasisHandler::FillBasis
       *
       * @return A boolean flag specifying whether the a valid basis was
       * constructed (@c true) or not.
       */
      bool NextBasis();

    private:
      Gauge::NVectorHandler nvector_handler_;  /*!< An instance of
                                                 Gauge::NVectorHandler for
                                                 systematically constructing
                                                 Gauge::NVectors. */
      Basis basis_;                           /*!< An instance of Gauge::Basis
                                                to store the most recently
                                                constructed basis. */
      /*! We made the copy constructor private to prevent copying. */
      BasisHandler(const BasisHandler &other);
      /*! As with the copy constructor, the assignment operator is private. */
      BasisHandler &operator=(const BasisHandler &other);
      /*!
       * This method uses the contents of the current Gauge::NVector solution
       * and the a-matrix to fill the Gauge::Basis.
       */
      void FillBasis();
  };
}

#endif
